(function (e) { e.fn.extend({ parseUrlLink: function (t) { this.each(function () { if (t && typeof t == "object") { e.extend(e.parseUrlLink.input, t) } new e.parseUrlLink(this) }); return } }); e.parseUrlLink = function (t) { var n = e.parseUrlLink.options; var r = e.parseUrlLink.input; if (r.text) { n.result = n.text = r.text } else { n.result = n.text = e(t).text() } e.parseUrlLink.replaceTag("http"); e.parseUrlLink.replaceTag("www."); e(t).html(n.result); e.parseUrlLink.input = {} }; e.parseUrlLink.options = { template: '<a target="_blank" href="{0}">{1}</a>', text: "", result: "", count: null, lastindex: -1, link: "", tag: "", templink: "", prevtag: "", option: undefined }; e.parseUrlLink.input = {}; e.parseUrlLink.replaceTag = function (t) { var n = e.parseUrlLink.options; n.template = '<a target="_blank" href="{0}">{1}</a>'; var r = new RegExp(t, "gi"); n.count = n.text.match(r); n.prevtag = ""; if (n.count && n.count.length > 0) { for (var i = 0; i < n.count.length; i++) { n.lastindex = n.text.toLowerCase().indexOf(" ", n.text.toLowerCase().indexOf(t)); if (n.text.toLowerCase().indexOf(t) > 0 && n.lastindex === -1) { n.lastindex = n.text.length } n.link = n.text.substring(n.text.toLowerCase().indexOf(t), n.lastindex).trim(); var s = /^(http[s]?:\/\/){0,1}(www\.){0,1}[a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,5}[\.]{0,1}/gi; if (s.test(n.link)) { n.tag = n.template; n.tag = n.tag.replace("{0}", t === "www." ? "http://" + n.link : n.link).replace("{1}", n.link); if (n.prevtag.length === 0) { n.result = n.result.replace(n.link, n.tag) } else { n.result = n.result.substring(0, n.result.lastIndexOf(n.prevtag) + n.prevtag.length) + n.result.replace(n.result.substring(0, n.result.lastIndexOf(n.prevtag) + n.prevtag.length), "").replace(n.link, n.tag) } n.text = n.text.replace(n.link, ""); n.prevtag = n.tag } else { n.text = n.text.replace(n.link, "") } } } } })(jQuery)
